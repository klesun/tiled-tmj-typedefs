
type int = number;
type double = number;

/**
 * this type describes the .tmj file structure generated by Tiled tilemap editor
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/
 */
export default interface TiledMap {
    /** Hex-formatted color (#RRGGBB or #AARRGGBB) (optional) */
    backgroundcolor?: string;
    /** The class of the map (since 1.9, optional) */
    class?: string;
    /** The compression level to use for tile layer data (defaults to -1, which means to use the algorithm default) */
    compressionlevel: int;
    /** Number of tile rows */
    height: int;
    /** Length of the side of a hex tile in pixels (hexagonal maps only) */
    hexsidelength?: int;
    /** Whether the map has infinite dimensions */
    infinite: boolean;
    /** Array of Layers */
    layers: Layer[];
    /** Auto-increments for each layer */
    nextlayerid: int;
    /** Auto-increments for each placed object */
    nextobjectid: int;
    orientation: "orthogonal" | "isometric" | "staggered" | "hexagonal";
    /** X coordinate of the parallax origin in pixels (since 1.8, default: 0) */
    parallaxoriginx?: double;
    /** Y coordinate of the parallax origin in pixels (since 1.8, default: 0) */
    parallaxoriginy?: double;
    /** Array of Properties */
    properties?: Property[];
    /** right-down (the default), right-up, left-down or left-up (currently only supported for orthogonal maps) */
    renderorder?: string;
    /** staggered / hexagonal maps only */
    staggeraxis?: "x" | "y";
    /** staggered / hexagonal maps only */
    staggerindex?: "odd" | "even";
    /** The Tiled version used to save the file */
    tiledversion: string;
    /** Map grid height */
    tileheight: int;
    /** Array of Tilesets */
    tilesets: Tileset[];
    /** Map grid width */
    tilewidth: int;
    /** map (since 1.0) */
    type: string;
    /** The JSON format version (previously a number, saved as string since 1.6) */
    version: string;
    /** Number of tile columns */
    width: int;
}

export interface LayerBase {
    /** The class of the layer (since 1.9, optional) */
    class?: string;
    /** Incremental ID - unique across all layers */
    id: int;
    /** Whether layer is locked in the editor (default: false). (since Tiled 1.8.2) */
    locked?: boolean;
    /** Name assigned to this layer */
    name: string;
    /** Horizontal layer offset in pixels (default: 0) */
    offsetx: double;
    /** Vertical layer offset in pixels (default: 0) */
    offsety: double;
    /** Value between 0 and 1 */
    opacity: double;
    /** Horizontal parallax factor for this layer (default: 1). (since Tiled 1.5) */
    parallaxx?: double;
    /** Vertical parallax factor for this layer (default: 1). (since Tiled 1.5) */
    parallaxy?: double;
    /** Array of Properties */
    properties?: Property[];
    /** X coordinate where layer content starts (for infinite maps) */
    startx?: int;
    /** Y coordinate where layer content starts (for infinite maps) */
    starty?: int;
    /** Hex-formatted tint color (#RRGGBB or #AARRGGBB) that is multiplied with any graphics drawn by this layer or any child layers (optional). */
    tintcolor?: string;
    type: "tilelayer" | "objectgroup" | "imagelayer" | "group";
    /** Whether layer is shown or hidden in editor */
    visible: boolean;
    /** Horizontal layer offset in tiles. Always 0. */
    x: int;
    /** Vertical layer offset in tiles. Always 0. */
    y: int;
}

/**
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#layer
 */
export type Layer = LayerBase & ({
    type: "tilelayer";
    /** Array of chunks (optional). tilelayer only. */
    chunks?: Chunk[];
    /** csv (default) or base64. tilelayer only. */
    encoding?: "csv" | "base64";
    /** Row count. Same as map height for fixed-size maps. tilelayer only. */
    height: int;
    /** zlib, gzip, zstd (since Tiled 1.3) or empty (default). tilelayer only. */
    compression?: "zlib" | "gzip" | "zstd";
    /** or string Array of unsigned int (GIDs) or base64-encoded data. tilelayer only. */
    data: number[];
    /** Column count. Same as map width for fixed-size maps. tilelayer only. */
    width: int;
} | {
    type: "objectgroup";
    /** topdown (default) or index. objectgroup only. */
    draworder: "topdown" | "index";
    /** Array of objects. objectgroup only. */
    objects: Object[];
} | {
    type: "imagelayer";
    /** Image used by this layer. imagelayer only. */
    image: string;
    /** Whether the image drawn by this layer is repeated along the X axis. imagelayer only. (since Tiled 1.8) */
    repeatx: boolean;
    /** Whether the image drawn by this layer is repeated along the Y axis. imagelayer only. (since Tiled 1.8) */
    repeaty: boolean;
    /** Hex-formatted color (#RRGGBB) (optional). imagelayer only. */
    transparentcolor: string;
} | {
    type: "group";
    /** Array of layers. group only. */
    layers: Layer[];
});

/**
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#chunk
 * Chunks are used to store the tile layer data for infinite maps.
 * @see https://doc.mapeditor.org/en/stable/manual/using-infinite-maps/
 */
export interface Chunk {
    /** or string Array of unsigned int (GIDs) or base64-encoded data */
    data: unknown[];
    /** Height in tiles */
    height: int;
    /** Width in tiles */
    width: int;
    /** X coordinate in tiles */
    x: int;
    /** Y coordinate in tiles */
    y: int;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#object */
export interface Object {
    /** Used to mark an object as an ellipse */
    ellipse?: boolean;
    /** Global tile ID, only if object represents a tile */
    gid?: int;
    /** Height in pixels. */
    height: double;
    /** Incremental ID, unique across all objects */
    id: int;
    /** String assigned to name field in editor */
    name: string;
    /** Used to mark an object as a point */
    point?: boolean;
    /** Array of Points, in case the object is a polygon */
    polygon?: Point[];
    /** Array of Points, in case the object is a polyline */
    polyline?: Point[];
    /** Array of Properties */
    properties?: Property[];
    /** Angle in degrees clockwise */
    rotation: double;
    /** Reference to a template file, in case object is a template instance */
    template?: string;
    /** Only used for text objects */
    text?: Text;
    /** The class of the object (was saved as class in 1.9, optional) */
    type: string;
    /** Whether object is shown in editor. */
    visible: boolean;
    /** Width in pixels. */
    width: double;
    /** X coordinate in pixels */
    x: double;
    /** Y coordinate in pixels */
    y: double;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#text */
export interface Text {
    /** Whether to use a bold font (default: false) */
    bold: boolean;
    /** Hex-formatted color (#RRGGBB or #AARRGGBB) (default: #000000) */
    color: string;
    /** Font family (default: sans-serif) */
    fontfamily: string;
    /** Horizontal alignment (center, right, justify or left (default)) */
    halign: "center" | "right" | "justify" | "left";
    /** Whether to use an italic font (default: false) */
    italic: boolean;
    /** Whether to use kerning when placing characters (default: true) */
    kerning: boolean;
    /** Pixel size of font (default: 16) */
    pixelsize: int;
    /** Whether to strike out the text (default: false) */
    strikeout: boolean;
    /** Text */
    text: string;
    /** Whether to underline the text (default: false) */
    underline: boolean;
    /** Vertical alignment (center, bottom or top (default)) */
    valign: "center" | "bottom" | "top";
    /** Whether the text is wrapped within the object bounds (default: false) */
    wrap: boolean;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#tileset */
export interface Tileset {
    /** Hex-formatted color (#RRGGBB or #AARRGGBB) (optional) */
    backgroundcolor?: string;
    /** The class of the tileset (since 1.9, optional) */
    class?: string;
    /** The number of tile columns in the tileset */
    columns: int;
    /** The fill mode to use when rendering tiles from this tileset (stretch (default) or preserve-aspect-fit) (since 1.9) */
    fillmode?: "stretch" | "preserve-aspect-fit";
    /**
     * GID corresponding to the first tile in the set
     * This allows you to map the global IDs back to the right tileset,
     * and then calculate the local tile ID by subtracting the firstgid from
     * the global tile ID. The first tileset always has a firstgid value of 1
     */
    firstgid: int;
    /** optional) */
    grid?: Grid;
    /** Image used for tiles in this set */
    image: string;
    /** Height of source image in pixels */
    imageheight: int;
    /** Width of source image in pixels */
    imagewidth: int;
    /** Buffer between image edge and first tile (pixels) */
    margin: int;
    /** Name given to this tileset */
    name: string;
    /** Alignment to use for tile objects (unspecified (default), topleft, top, topright, left, center, right, bottomleft, bottom or bottomright) (since 1.4) */
    objectalignment?: "topleft" | "top" | "topright" | "left" | "center" | "right" | "bottomleft" | "bottom" | "bottomright";
    /** Array of Properties */
    properties?: Property[];
    /** The external file that contains this tilesets data */
    source?: string;
    /** Spacing between adjacent tiles in image (pixels) */
    spacing: int;
    /** Array of Terrains (optional) */
    terrains?: Terrain[];
    /** The number of tiles in this tileset */
    tilecount: int;
    /** The Tiled version used to save the file */
    tiledversion?: string;
    /** Maximum height of tiles in this set */
    tileheight: int;
    /** Offset (optional) */
    tileoffset?: TileOffset;
    /** The size to use when rendering tiles from this tileset on a tile layer (tile (default) or grid) (since 1.9) */
    tilerendersize?: "tile" | "grid";
    /** Array of Tiles (optional) */
    tiles?: Tile[];
    /** Maximum width of tiles in this set */
    tilewidth: int;
    /** Allowed transformations (optional) */
    transformations?: Transformations;
    /** Hex-formatted color (#RRGGBB) (optional) */
    transparentcolor?: string;
    /** tileset (for tileset files, since 1.0) */
    type?: string;
    /** The JSON format version (previously a number, saved as string since 1.6) */
    version?: string;
    /** Array of Wang sets (since 1.1.5) */
    wangsets?: WangSet[];
}

/**
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#grid
 * Specifies common grid settings used for tiles in a tileset.
 * @see https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tmx-grid in the TMX Map Format.
 */
export interface Grid {
    /** Cell height of tile grid */
    height: int;
    /** orthogonal (default) or isometric */
    orientation: "orthogonal" | "isometric";
    /** Cell width of tile grid */
    width: int;
}

/**
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#tile-offset
 * @see https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tmx-tileoffset in the TMX Map Format
 */
export interface TileOffset {
    /** Horizontal offset in pixels */
    x: int;
    /** Vertical offset in pixels (positive is down) */
    y: int;
}

/**
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#transformations
 * @see https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tmx-tileset-transformations in the TMX Map Format
 */
export interface Transformations {
    /** Tiles can be flipped horizontally */
    hflip: boolean;
    /** Tiles can be flipped vertically */
    vflip: boolean;
    /** Tiles can be rotated in 90-degree increments */
    rotate: boolean;
    /** Whether untransformed tiles remain preferred, otherwise transformed tiles are used to produce more variations */
    preferuntransformed: boolean;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#tile-definition */
export interface Tile {
    /** Array of Frames */
    animation: Frame[];
    /** Local ID of the tile */
    id: int;
    /** Image representing this tile (optional, used for image collection tilesets) */
    image?: string;
    /** Height of the tile image in pixels */
    imageheight: int;
    /** Width of the tile image in pixels */
    imagewidth: int;
    /** The X position of the sub-rectangle representing this tile (default: 0) */
    x: int;
    /** The Y position of the sub-rectangle representing this tile (default: 0) */
    y: int;
    /** The width of the sub-rectangle representing this tile (defaults to the image width) */
    width: int;
    /** The height of the sub-rectangle representing this tile (defaults to the image height) */
    height: int;
    /** Layer with type objectgroup, when collision shapes are specified (optional) */
    objectgroup?: Layer;
    /** Percentage chance this tile is chosen when competing with others in the editor (optional) */
    probability: double;
    /** Array of Properties */
    properties?: Property[];
    /** Index of terrain for each corner of tile (optional, replaced by Wang sets since 1.5) */
    terrain?: unknown[];
    /** The class of the tile (was saved as class in 1.9, optional) */
    type?: string;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#frame */
export interface Frame {
    /** Frame duration in milliseconds */
    duration: int;
    /** Local tile ID representing this frame */
    tileid: int;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#terrain */
export interface Terrain {
    /** Name of terrain */
    name: string;
    /** Array of Properties */
    properties?: Property[];
    /** Local ID of tile representing terrain */
    tile: int;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#wang-set */
export interface WangSet {
    /** The class of the Wang set (since 1.9, optional) */
    class?: string;
    /** Array of Wang colors (since 1.5) */
    colors: WangColor[];
    /** Name of the Wang set */
    name: string;
    /** Array of Properties */
    properties?: Property[];
    /** Local ID of tile representing the Wang set */
    tile: int;
    /** corner, edge or mixed (since 1.5) */
    type: "corner" | "edge" | "mixed";
    /** Array of Wang tiles */
    wangtiles: WangTile[];
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#wang-color */
export interface WangColor {
    /** The class of the Wang color (since 1.9, optional) */
    class?: string;
    /** Hex-formatted color (#RRGGBB or #AARRGGBB) */
    color: string;
    /** Name of the Wang color */
    name: string;
    /** Probability used when randomizing */
    probability: double;
    /** Array of Properties (since 1.5) */
    properties?: Property[];
    /** Local ID of tile representing the Wang color */
    tile: int;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#wang-tile */
export interface WangTile {
    /** Array of Wang color indexes (uchar[8]) */
    wangid: number;
}

/**
 * An object template is written to its own file and referenced by any instances of that template.
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#object-template
 */
export interface ObjectTemplate {
    /** External tileset used by the template (optional) */
    tileset?: Tileset;
    /** The object instantiated by this template */
    object: Object;
}

/** @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#property */
export interface Property {
    /** Name of the property */
    name: string;
    /** Type of the property (string (default), int, float, bool, color, file, object or class (since 0.16, with color and file added in 0.17, object added in 1.4 and class added in 1.8)) */
    type: "string" | "int" | "float" | "bool" | "color" | "file" | "class";
    /** Name of the custom property type, when applicable (since 1.8) */
    propertytype: string;
    /** Value of the property */
    value: unknown;
}

/**
 * A point on a polygon or a polyline, relative to the position of the object.
 * @see https://doc.mapeditor.org/en/stable/reference/json-map-format/#point
 */
export interface Point {
    /** @see X coordinate in pixels */
    x: double;
    /** @see Y coordinate in pixels */
    y: double;
}
